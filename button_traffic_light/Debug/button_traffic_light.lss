
button_traffic_light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000282  000002f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000282  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b16  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008e4  00000000  00000000  00000ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000427  00000000  00000000  000017a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004bd  00000000  00000000  00001c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000030c  00000000  00000000  000020f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000023fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e8       	ldi	r30, 0x82	; 130
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	58 d0       	rcall	.+176    	; 0x164 <main>
  b4:	e4 c0       	rjmp	.+456    	; 0x27e <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <traffic_light>:

void delay_100(){
	_delay_ms(100);
}

void traffic_light(uint8_t *number, uint8_t *direction){
  b8:	dc 01       	movw	r26, r24

	if(*direction == 0){		//수평방향 신호일 경우,
  ba:	fb 01       	movw	r30, r22
  bc:	90 81       	ld	r25, Z
  be:	91 11       	cpse	r25, r1
  c0:	10 c0       	rjmp	.+32     	; 0xe2 <traffic_light+0x2a>
		PORTD = h_light[*number] | 0x01;
  c2:	ec 91       	ld	r30, X
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	e8 5f       	subi	r30, 0xF8	; 248
  c8:	fe 4f       	sbci	r31, 0xFE	; 254
  ca:	80 81       	ld	r24, Z
  cc:	81 60       	ori	r24, 0x01	; 1
  ce:	82 bb       	out	0x12, r24	; 18
		PORTF = h_light[*number] | 0x01;
  d0:	ec 91       	ld	r30, X
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	e8 5f       	subi	r30, 0xF8	; 248
  d6:	fe 4f       	sbci	r31, 0xFE	; 254
  d8:	80 81       	ld	r24, Z
  da:	81 60       	ori	r24, 0x01	; 1
  dc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
  e0:	08 95       	ret
	}
	else if(*direction == 1){		//수직방향 신호일 경우,
  e2:	91 30       	cpi	r25, 0x01	; 1
  e4:	79 f4       	brne	.+30     	; 0x104 <traffic_light+0x4c>
		PORTD = v_light[*number] | 0x80;
  e6:	ec 91       	ld	r30, X
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	ec 5f       	subi	r30, 0xFC	; 252
  ec:	fe 4f       	sbci	r31, 0xFE	; 254
  ee:	80 81       	ld	r24, Z
  f0:	80 68       	ori	r24, 0x80	; 128
  f2:	82 bb       	out	0x12, r24	; 18
		PORTF = v_light[*number] | 0x80;
  f4:	ec 91       	ld	r30, X
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	ec 5f       	subi	r30, 0xFC	; 252
  fa:	fe 4f       	sbci	r31, 0xFE	; 254
  fc:	80 81       	ld	r24, Z
  fe:	80 68       	ori	r24, 0x80	; 128
 100:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 104:	08 95       	ret

00000106 <button_read>:
	}
}

uint8_t button_read(uint8_t *prev, uint8_t *current){
 106:	fc 01       	movw	r30, r24
	uint8_t switch_val = PINA & 0x06;
 108:	99 b3       	in	r25, 0x19	; 25
 10a:	96 70       	andi	r25, 0x06	; 6
	*current = 0;
 10c:	db 01       	movw	r26, r22
 10e:	1c 92       	st	X, r1
	if(switch_val == 0x00){		//버튼 1번이 눌렸을 경우,
 110:	91 11       	cpse	r25, r1
 112:	11 c0       	rjmp	.+34     	; 0x136 <button_read+0x30>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	bf ef       	ldi	r27, 0xFF	; 255
 116:	29 ef       	ldi	r18, 0xF9	; 249
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	b1 50       	subi	r27, 0x01	; 1
 11c:	20 40       	sbci	r18, 0x00	; 0
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <button_read+0x14>
 122:	00 c0       	rjmp	.+0      	; 0x124 <button_read+0x1e>
 124:	00 00       	nop
		_delay_ms(20);
		*current = 1;
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	db 01       	movw	r26, r22
 12a:	8c 93       	st	X, r24
		if((*current == 1) && (*prev == 0)){		//버튼이 눌려있고, 이전상태가 0인경우,
			return 1;
 12c:	90 81       	ld	r25, Z
 12e:	99 23       	and	r25, r25
 130:	c1 f0       	breq	.+48     	; 0x162 <button_read+0x5c>
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	08 95       	ret
		}
	}
	else if(switch_val == 0x06){	//버튼 2번이 눌렸을 경우,
 136:	96 30       	cpi	r25, 0x06	; 6
 138:	89 f4       	brne	.+34     	; 0x15c <button_read+0x56>
 13a:	bf ef       	ldi	r27, 0xFF	; 255
 13c:	29 ef       	ldi	r18, 0xF9	; 249
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	b1 50       	subi	r27, 0x01	; 1
 142:	20 40       	sbci	r18, 0x00	; 0
 144:	80 40       	sbci	r24, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <button_read+0x3a>
 148:	00 c0       	rjmp	.+0      	; 0x14a <button_read+0x44>
 14a:	00 00       	nop
		_delay_ms(20);
		*current = 1;
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	db 01       	movw	r26, r22
 150:	8c 93       	st	X, r24
		if((*current == 1) && (*prev == 0)){
 152:	80 81       	ld	r24, Z
 154:	88 23       	and	r24, r24
 156:	21 f0       	breq	.+8      	; 0x160 <button_read+0x5a>
			return 2;
		}
	}
	return 0;		//아무것도 눌리지 않았을 경우,
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	08 95       	ret
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	08 95       	ret
	}
	else if(switch_val == 0x06){	//버튼 2번이 눌렸을 경우,
		_delay_ms(20);
		*current = 1;
		if((*current == 1) && (*prev == 0)){
			return 2;
 160:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	return 0;		//아무것도 눌리지 않았을 경우,
}
 162:	08 95       	ret

00000164 <main>:

int main(void){
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	00 d0       	rcall	.+0      	; 0x16a <main+0x6>
 16a:	00 d0       	rcall	.+0      	; 0x16c <main+0x8>
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00;
 170:	1a ba       	out	0x1a, r1	; 26
	DDRD = 0xFF;
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	81 bb       	out	0x11, r24	; 17
	DDRF = 0xFF;
 176:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRC = 0x01;		//수동버튼 동작 테스트용.
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	94 bb       	out	0x14, r25	; 20
	PORTA = 0x0FF;
 17e:	8b bb       	out	0x1b, r24	; 27
	
	uint8_t button_value = 0;
	uint8_t btn_prev = 0, btn_current = 0;
 180:	19 82       	std	Y+1, r1	; 0x01
 182:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t light_number = 0, light_dir = 0;		//신호 순서, 출력 방향 저장 변수. 출력방향 -> 0 : 수평신호, 1 : 수직신호.
 184:	1b 82       	std	Y+3, r1	; 0x03
 186:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t mode = 0;		//자동,수동모드 결정. 0 : 자동, 1 : 수동.
 188:	81 2c       	mov	r8, r1
	DDRD = 0xFF;
	DDRF = 0xFF;
	DDRC = 0x01;		//수동버튼 동작 테스트용.
	PORTA = 0x0FF;
	
	uint8_t button_value = 0;
 18a:	f1 2c       	mov	r15, r1
				light_dir ^= 0x01;
			}
		}

		else if(mode == 1){		//수동모드
			button_value = button_read(&btn_prev, &btn_current);
 18c:	6e 01       	movw	r12, r28
 18e:	22 e0       	ldi	r18, 0x02	; 2
 190:	c2 0e       	add	r12, r18
 192:	d1 1c       	adc	r13, r1
 194:	ce 01       	movw	r24, r28
 196:	01 96       	adiw	r24, 0x01	; 1
 198:	2c 01       	movw	r4, r24
			btn_prev = btn_current;
			if(button_value == 1){		//모드 선택버튼이 눌렸을 경우,
				mode ^= 0x01;
 19a:	61 2c       	mov	r6, r1
			}
			else if(button_value == 2){		//수동조작 버튼이 눌렸을 경우,
				light_number++;
				if(light_number > 3){		//신호등 패턴을 초과했을 경우,
					light_number = 0;
					light_dir ^= 0x01;		//수직, 수평 방향 전환
 19c:	77 24       	eor	r7, r7
 19e:	73 94       	inc	r7
	while (1) {
		if(mode == 0){		//자동모드
			for(; light_number < 4; light_number++){
				traffic_light(&light_number, &light_dir);		//신호등 상태, 신호등 방향으로 신호등 점등.
				for(i = 0; i < delay_time[light_number]; i++){	//각 신호등 상태마다 설정된 delay 수행.
					button_value = button_read(&btn_prev, &btn_current);		//자동모드에서 중간에 버튼 입력을 받기 위함.
 1a0:	9c 2c       	mov	r9, r12
 1a2:	ad 2c       	mov	r10, r13
 1a4:	b8 2e       	mov	r11, r24
 1a6:	e5 2c       	mov	r14, r5
	uint8_t light_number = 0, light_dir = 0;		//신호 순서, 출력 방향 저장 변수. 출력방향 -> 0 : 수평신호, 1 : 수직신호.
	uint8_t mode = 0;		//자동,수동모드 결정. 0 : 자동, 1 : 수동.
	int i = 0;

	while (1) {
		if(mode == 0){		//자동모드
 1a8:	81 10       	cpse	r8, r1
 1aa:	46 c0       	rjmp	.+140    	; 0x238 <main+0xd4>
			for(; light_number < 4; light_number++){
 1ac:	8b 81       	ldd	r24, Y+3	; 0x03
 1ae:	84 30       	cpi	r24, 0x04	; 4
 1b0:	d8 f5       	brcc	.+118    	; 0x228 <main+0xc4>
				traffic_light(&light_number, &light_dir);		//신호등 상태, 신호등 방향으로 신호등 점등.
 1b2:	be 01       	movw	r22, r28
 1b4:	6c 5f       	subi	r22, 0xFC	; 252
 1b6:	7f 4f       	sbci	r23, 0xFF	; 255
 1b8:	ce 01       	movw	r24, r28
 1ba:	03 96       	adiw	r24, 0x03	; 3
 1bc:	7d df       	rcall	.-262    	; 0xb8 <traffic_light>
				for(i = 0; i < delay_time[light_number]; i++){	//각 신호등 상태마다 설정된 delay 수행.
 1be:	eb 81       	ldd	r30, Y+3	; 0x03
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	e0 50       	subi	r30, 0x00	; 0
 1c4:	ff 4f       	sbci	r31, 0xFF	; 255
 1c6:	80 81       	ld	r24, Z
 1c8:	88 23       	and	r24, r24
 1ca:	11 f1       	breq	.+68     	; 0x210 <main+0xac>
 1cc:	00 e0       	ldi	r16, 0x00	; 0
 1ce:	10 e0       	ldi	r17, 0x00	; 0
					button_value = button_read(&btn_prev, &btn_current);		//자동모드에서 중간에 버튼 입력을 받기 위함.
 1d0:	69 2d       	mov	r22, r9
 1d2:	7a 2d       	mov	r23, r10
 1d4:	8b 2d       	mov	r24, r11
 1d6:	9e 2d       	mov	r25, r14
 1d8:	96 df       	rcall	.-212    	; 0x106 <button_read>
 1da:	f8 2e       	mov	r15, r24
					btn_prev = btn_current;
 1dc:	8a 81       	ldd	r24, Y+2	; 0x02
 1de:	89 83       	std	Y+1, r24	; 0x01
					if(button_value == 1)
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	f9 16       	cp	r15, r25
 1e4:	c1 f0       	breq	.+48     	; 0x216 <main+0xb2>
 1e6:	2f ef       	ldi	r18, 0xFF	; 255
 1e8:	81 ee       	ldi	r24, 0xE1	; 225
 1ea:	94 e0       	ldi	r25, 0x04	; 4
 1ec:	21 50       	subi	r18, 0x01	; 1
 1ee:	80 40       	sbci	r24, 0x00	; 0
 1f0:	90 40       	sbci	r25, 0x00	; 0
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <main+0x88>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <main+0x92>
 1f6:	00 00       	nop

	while (1) {
		if(mode == 0){		//자동모드
			for(; light_number < 4; light_number++){
				traffic_light(&light_number, &light_dir);		//신호등 상태, 신호등 방향으로 신호등 점등.
				for(i = 0; i < delay_time[light_number]; i++){	//각 신호등 상태마다 설정된 delay 수행.
 1f8:	0f 5f       	subi	r16, 0xFF	; 255
 1fa:	1f 4f       	sbci	r17, 0xFF	; 255
 1fc:	eb 81       	ldd	r30, Y+3	; 0x03
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	e0 50       	subi	r30, 0x00	; 0
 202:	ff 4f       	sbci	r31, 0xFF	; 255
 204:	80 81       	ld	r24, Z
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	08 17       	cp	r16, r24
 20a:	19 07       	cpc	r17, r25
 20c:	0c f3       	brlt	.-62     	; 0x1d0 <main+0x6c>
 20e:	06 c0       	rjmp	.+12     	; 0x21c <main+0xb8>
					btn_prev = btn_current;
					if(button_value == 1)
					break;									//딜레이 도중, 1번 버튼 눌리면 수동모드로 전환.
					delay_100();
				}
				if(button_value == 1){
 210:	21 e0       	ldi	r18, 0x01	; 1
 212:	f2 12       	cpse	r15, r18
 214:	03 c0       	rjmp	.+6      	; 0x21c <main+0xb8>
					mode ^= 0x01;		//모드 변경
 216:	87 2c       	mov	r8, r7
 218:	f7 2c       	mov	r15, r7
 21a:	2f c0       	rjmp	.+94     	; 0x27a <main+0x116>
	uint8_t mode = 0;		//자동,수동모드 결정. 0 : 자동, 1 : 수동.
	int i = 0;

	while (1) {
		if(mode == 0){		//자동모드
			for(; light_number < 4; light_number++){
 21c:	8b 81       	ldd	r24, Y+3	; 0x03
 21e:	8f 5f       	subi	r24, 0xFF	; 255
 220:	8b 83       	std	Y+3, r24	; 0x03
 222:	84 30       	cpi	r24, 0x04	; 4
 224:	30 f2       	brcs	.-116    	; 0x1b2 <main+0x4e>
 226:	03 c0       	rjmp	.+6      	; 0x22e <main+0xca>
				if(button_value == 1){
					mode ^= 0x01;		//모드 변경
					break;
				}
			}
			if(button_value != 1){
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	f8 16       	cp	r15, r24
 22c:	31 f1       	breq	.+76     	; 0x27a <main+0x116>
				light_number = 0;
 22e:	6b 82       	std	Y+3, r6	; 0x03
				light_dir ^= 0x01;
 230:	8c 81       	ldd	r24, Y+4	; 0x04
 232:	87 25       	eor	r24, r7
 234:	8c 83       	std	Y+4, r24	; 0x04
 236:	21 c0       	rjmp	.+66     	; 0x27a <main+0x116>
			}
		}

		else if(mode == 1){		//수동모드
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	89 12       	cpse	r8, r25
 23c:	1e c0       	rjmp	.+60     	; 0x27a <main+0x116>
			button_value = button_read(&btn_prev, &btn_current);
 23e:	b6 01       	movw	r22, r12
 240:	c2 01       	movw	r24, r4
 242:	61 df       	rcall	.-318    	; 0x106 <button_read>
 244:	f8 2e       	mov	r15, r24
			btn_prev = btn_current;
 246:	8a 81       	ldd	r24, Y+2	; 0x02
 248:	89 83       	std	Y+1, r24	; 0x01
			if(button_value == 1){		//모드 선택버튼이 눌렸을 경우,
 24a:	21 e0       	ldi	r18, 0x01	; 1
 24c:	f2 16       	cp	r15, r18
 24e:	a1 f0       	breq	.+40     	; 0x278 <main+0x114>
				mode ^= 0x01;
			}
			else if(button_value == 2){		//수동조작 버튼이 눌렸을 경우,
 250:	82 e0       	ldi	r24, 0x02	; 2
 252:	f8 12       	cpse	r15, r24
 254:	12 c0       	rjmp	.+36     	; 0x27a <main+0x116>
				light_number++;
 256:	8b 81       	ldd	r24, Y+3	; 0x03
 258:	8f 5f       	subi	r24, 0xFF	; 255
				if(light_number > 3){		//신호등 패턴을 초과했을 경우,
 25a:	84 30       	cpi	r24, 0x04	; 4
 25c:	10 f4       	brcc	.+4      	; 0x262 <main+0xfe>
			btn_prev = btn_current;
			if(button_value == 1){		//모드 선택버튼이 눌렸을 경우,
				mode ^= 0x01;
			}
			else if(button_value == 2){		//수동조작 버튼이 눌렸을 경우,
				light_number++;
 25e:	8b 83       	std	Y+3, r24	; 0x03
 260:	04 c0       	rjmp	.+8      	; 0x26a <main+0x106>
				if(light_number > 3){		//신호등 패턴을 초과했을 경우,
					light_number = 0;
 262:	6b 82       	std	Y+3, r6	; 0x03
					light_dir ^= 0x01;		//수직, 수평 방향 전환
 264:	8c 81       	ldd	r24, Y+4	; 0x04
 266:	87 25       	eor	r24, r7
 268:	8c 83       	std	Y+4, r24	; 0x04
				}
				traffic_light(&light_number, &light_dir);
 26a:	be 01       	movw	r22, r28
 26c:	6c 5f       	subi	r22, 0xFC	; 252
 26e:	7f 4f       	sbci	r23, 0xFF	; 255
 270:	ce 01       	movw	r24, r28
 272:	03 96       	adiw	r24, 0x03	; 3
 274:	21 df       	rcall	.-446    	; 0xb8 <traffic_light>
 276:	01 c0       	rjmp	.+2      	; 0x27a <main+0x116>

		else if(mode == 1){		//수동모드
			button_value = button_read(&btn_prev, &btn_current);
			btn_prev = btn_current;
			if(button_value == 1){		//모드 선택버튼이 눌렸을 경우,
				mode ^= 0x01;
 278:	86 2c       	mov	r8, r6
					light_dir ^= 0x01;		//수직, 수평 방향 전환
				}
				traffic_light(&light_number, &light_dir);
			}
		}
		PORTC = mode;
 27a:	85 ba       	out	0x15, r8	; 21
	}
 27c:	95 cf       	rjmp	.-214    	; 0x1a8 <main+0x44>

0000027e <_exit>:
 27e:	f8 94       	cli

00000280 <__stop_program>:
 280:	ff cf       	rjmp	.-2      	; 0x280 <__stop_program>
